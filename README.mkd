# dndiku-combat-demo-180716 - custom Ranvier MUD combat system demo

D20ish combat system for the amazing Ranvier MUD engine!


## How to Install

You can either modify a virgin ranvier clone using the below steps, or just clone an already modified ranvier build I've set up here: 


#### 1. Download required bundles
```
# download
git clone https://github.com/jamesheston/dndiku-combat.git
git clone https://github.com/jamesheston/dndiku-lib.git
git clone 
# remove old bundles from computer
rm -rf bundles/ranvier-classes
rm -rf bundles/ranvier-combat
```


#### 2. Edit `ranvier.config` 
First we need to enable new bundles and disable old ones. 
So remove these lines:
```
ranvier-classes
ranvier-combat
```
And add these lines:
```
dndiku-lib,
dndiku-combat,
dndiku-classes,
```
And watch your commas!

Also, let's go ahead and change the starting room to be in our ctest area for testing convenience.

Replace this old line: 
```
  "startingRoom": "limbo:1",
```
with this new line:
```
  "startingRoom": "ctest:0-0-0",
```


#### ?. Edit src/BundleManager.js 

We need to replace instances of default PlayerClass.js with all player class files () defined in `/bundles/dndiku-classes/classes/*` directory.

So, add these two lines to the top of src/BundleManager.js:
```
const Fighter = require('../bundles/dndiku-classes/classes/Fighter')
const Wizard = require('../bundles/dndiku-classes/classes/Wizard')
```

And replace the default BundleManager.loadClasses() method definition with this one:
```
  loadClasses(bundle, classesDir) {
    Logger.verbose(`\tLOAD: Classes...`);
    const files = fs.readdirSync(classesDir);

    this.state.ClassManager.set('Fighter', new Fighter())
    this.state.ClassManager.set('Wizard', new Wizard())

    Logger.verbose(`\tENDLOAD: Classes...`);
  }
```

#### ?. Edit `/bundles/ranvier-input-events/input-events/choose-class.js`

replace these lines:
```
      say('  Pick your class');
      say(' --------------------------');
      const classes = [...state.ClassManager].map(([id, instance]) => {
        return [id, instance.config];
      });
      for (const [ id, config ] of classes) {
        say(`[<bold>${id}</bold>] - <bold>${config.name}</bold>`);
        say(Broadcast.wrap(`      ${config.description}\r\n`, 80));
      }
      write('> ');

      socket.once('data', choice => {
        choice = choice.toString().trim();
        choice = classes.find(([id, config]) => {
          return id.includes(choice) || config.name.toLowerCase().includes(choice);
        });

        if (!choice) {
          return socket.emit('choose-class', socket, args);
        }

        args.playerClass = choice[0];
        socket.emit('finish-player', socket, args);
      });
```

with these lines:
```
     say('  Pick your class');
      say(' --------------------------');
      const classes = [...state.ClassManager].map(([id, instance]) => {
        return [id, instance];
      });
      // for (const [ id, config ] of classes) {
      for (const [ id, instance ] of classes) {

        say(`[<bold>${id}</bold>] - <bold>${instance.name}</bold>`);
        say(Broadcast.wrap(`      ${instance.description}\r\n`, 80));
      }
      write('> ');

      socket.once('data', choice => {
        choice = choice.toString().trim();
        choice = classes.find(([id, instance]) => {
          return id.includes(choice) || instance.name.toLowerCase().includes(choice);
        });

        if (!choice) {
          return socket.emit('choose-class', socket, args);
        }

        args.playerClass = choice[0];
        socket.emit('finish-player', socket, args);
      });
```















## Upcoming Features



## Planned Features

#### 4 classes:
  1. Fighter
  2. Wizard
  3. Thief
  4. Cleric

#### Spellcasting
  * Casting duration to spe
  * Possible item/component requirements for more powerful spells.


## Bugs
* doesn't currently play well with original ranvier-commands/score.js "score" command.