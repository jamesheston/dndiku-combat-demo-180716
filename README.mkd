# dndiku-combat-demo-180716

D20ish combat system for the amazing Ranvier MUD engine!

This is an optional replacement for the ranvier-combat bundle that adds a dice-based combat system inspired by the CircleMUDs and tabletop games I grew up playing. MUME in particular is a very heavy influence.

**The system is requires 3 new bundles to work:**
  1. dndiku-lib - small utility bundle with functions commonly across multiple bundles
  2. dndiku-classes - character class combat stats, skills, spells, ...
  3. dndiku-combat - runs autocombat

**There are also some optional bundles for additional content:**
  * dndiku-monsters
  * dndiku-equipment

## Option 1: Install premodified Ranvier MUD build
Much easier: a clean, recent ranvier fork (commit ------) 

```
git clone https://github.com/jamesheston/dndiku-combat-demo-180716.git
cd dndiku-combat-demo-180716
npm install
npm run bundle-install
# then just run it
./ranvier
```

## Option 2: Install bundles and edit src/ _*manually*_ on new Ranvier clone

#### 1. Download required bundles
```
# download
git clone https://github.com/jamesheston/dndiku-lib.git
git clone https://github.com/jamesheston/dndiku-combat.git
git clone https://github.com/jamesheston/dndiku-classes.git
# remove old bundles from computer
rm -rf bundles/ranvier-classes
rm -rf bundles/ranvier-combat
```


#### 2. Edit `ranvier.config` 
First we need to enable new bundles and disable old ones. 
So remove these lines:
```
ranvier-classes
ranvier-combat
ranvier-areas
```
And add these lines:
```
dndiku-lib,
dndiku-combat,
dndiku-classes,
```
And watch your commas!

Also, let's go ahead and change the starting room to be in our ctest area for testing convenience.

Replace this old line: 
```
  "startingRoom": "limbo:1",
```
with this new line:
```
  "startingRoom": "ctest:0-0-0",
```


#### ?. Edit src/BundleManager.js 

We need to replace instances of default PlayerClass.js with all player class files () defined in `/bundles/dndiku-classes/classes/*` directory.

So, add these two lines to the top of src/BundleManager.js:
```
const Fighter = require('../bundles/dndiku-classes/classes/Fighter')
const Wizard = require('../bundles/dndiku-classes/classes/Wizard')
```

And replace the default BundleManager.loadClasses() method definition with this one:
```
  loadClasses(bundle, classesDir) {
    Logger.verbose(`\tLOAD: Classes...`);
    const files = fs.readdirSync(classesDir);

    this.state.ClassManager.set('Fighter', new Fighter())
    this.state.ClassManager.set('Wizard', new Wizard())

    Logger.verbose(`\tENDLOAD: Classes...`);
  }
```

#### ?. Edit `/bundles/ranvier-input-events/input-events/choose-class.js`

replace these lines:
```
      say('  Pick your class');
      say(' --------------------------');
      const classes = [...state.ClassManager].map(([id, instance]) => {
        return [id, instance.config];
      });
      for (const [ id, config ] of classes) {
        say(`[<bold>${id}</bold>] - <bold>${config.name}</bold>`);
        say(Broadcast.wrap(`      ${config.description}\r\n`, 80));
      }
      write('> ');

      socket.once('data', choice => {
        choice = choice.toString().trim();
        choice = classes.find(([id, config]) => {
          return id.includes(choice) || config.name.toLowerCase().includes(choice);
        });

        if (!choice) {
          return socket.emit('choose-class', socket, args);
        }

        args.playerClass = choice[0];
        socket.emit('finish-player', socket, args);
      });
```

with these lines:
```
     say('  Pick your class');
      say(' --------------------------');
      const classes = [...state.ClassManager].map(([id, instance]) => {
        return [id, instance];
      });
      // for (const [ id, config ] of classes) {
      for (const [ id, instance ] of classes) {

        say(`[<bold>${id}</bold>] - <bold>${instance.name}</bold>`);
        say(Broadcast.wrap(`      ${instance.description}\r\n`, 80));
      }
      write('> ');

      socket.once('data', choice => {
        choice = choice.toString().trim();
        choice = classes.find(([id, instance]) => {
          return id.includes(choice) || instance.name.toLowerCase().includes(choice);
        });

        if (!choice) {
          return socket.emit('choose-class', socket, args);
        }

        args.playerClass = choice[0];
        socket.emit('finish-player', socket, args);
      });
```

#### ?. Replace entire `/bundles/ranvier-input-events/input-events/finish-player.js` file contents with the following:
```
/**
 * Finish player creation. Add the character to the account then add the player
 * to the game world
 */
module.exports = (srcPath) => {
  const EventUtil = require(srcPath + 'EventUtil');
  const Player = require(srcPath + 'Player');
  const Fighter = require('../../dndiku-classes/classes/Fighter')
  const Wizard = require('../../dndiku-classes/classes/Wizard')

  return {
    event: state => (socket, args) => {
      let player = new Player({
        name: args.name,
        account: args.account,
        // TIP:DefaultAttributes: This is where you can change the default attributes for players
        attributes: {
          health: 1, // never pass 0 here, player will die on a loop
        }
      });

      args.account.addCharacter(args.name);
      args.account.save();

      player.setMeta('class', args.playerClass);

      let pClass
      // add character creation call on `player` obj here
      if( args.playerClass === 'Fighter' ) {
        pClass = new Fighter()
      } else if ( args.playerClass === 'Wizard' ) {
        pClass = new Wizard()
      }
      pClass.makeChar(player)

      const room = state.RoomManager.startingRoom;
      player.room = room;
      player.save();

      // reload from manager so events are set
      player = state.PlayerManager.loadPlayer(state, player.account, player.name);
      player.socket = socket;

      socket.emit('done', socket, { player });
    }
  };
};

```

And I'd say, "That's it," but... 
you *are* finally done! 









## Upcoming Features
* expanding combat test area with more equipment, mobs
* basic skills for Fighter: bash, kick, rescue/protect
* basic spells for Wizard: cure light, armour spell, shield spell, magic missile, burning hands
* "label" command to assist in targetting 


## Design Plan

#### 4 classes:
  1. Fighter
  2. Wizard
  3. Rogue
  4. Cleric

#### Spellcasting
  * add casting duration, spell speed, and and combat interruptions to spellcasting system
  * Possible item/component requirements for more powerful spells.

#### General skills/command:
  * riding: horses, etc
  * track: players and mobs will leave tracks on the ground that can be followed 
  * first aid
  * scan: list npcs, players in adjacent rooms
  * appraise

## Bugs
* doesn't currently play well with original ranvier-commands/score.js "score" command.